Package jescript.preprocessor;

// ---------------------------------------------------------------------------
// Helper and Tokens sections should be copied directly from erlang.grammar
// ---------------------------------------------------------------------------
Helpers
	any = [0..0xffff];
	whitespace = [[0..32]+[127..160]]+;                        // cr, lf, space, tab, control characters

	lowercase = [[248..255] + [[223..246] + ['a'..'z']]];
	uppercase = [[216..222] + [[192..214] + ['A'..'Z']]];
	digit = ['0'..'9'];
	hex = digit | [['a'..'f']+['A'..'F']];
	octal = ['0'..'7'];
	control = [[64..95]+[97..122]];
	alphanum = lowercase | uppercase | digit | ['_'+'@'];
	nonsinglequote = [any - '''];
	nonquote = [any - '"'];
	escapedchar = '\' [any - ['x'+'^']] | '\^' control | '\' octal octal? octal? | '\x' hex hex;
	comment = '%' [any - [10 + 13]]*;
	ignored = whitespace | comment;

Tokens

	// Separators
	lparen = '('; rparen = ')'; lbrace = '{';    rbrace = '}'; lbrack = '[';
	rbrack = ']'; dot = '.';    colon = ':';     bar = '|';    barbar = '||';
	semi = ';';   comma = ',';  question = '?';  arrow = '->'; pound = '#';
	ltlt = '<<';  gtgt = '>>';

	// Operators
	plus = '+';        dash = '-';    star = '*';      slash = '/';       div = 'div'; 
	rem = 'rem';       or = 'or';     xor = 'xor';     and = 'and';       andalso = 'andalso';
	orelse = 'orelse'; bor = 'bor';   bxor = 'bxor';   bsl = 'bsl';       bsr = 'bsr'; 
	band = 'band';     eq = '=';      eqeq = '==';     neq = '/=';        lt = '<';
	gt = '>';          le = '<=';     ge = '>=';       equiv = '=:=';     nequiv = '=/=';
	not = 'not';       bnot = 'bnot'; plusplus = '++'; minusminus = '--'; bang = '!';
	larrow = '<-';

	// Keywords
	after = 'after';     begin = 'begin';     case = 'case';  catch = 'catch';  cond = 'cond';
	end = 'end';         fun = 'fun';         if = 'if';      let = 'let';      of = 'of';
	receive = 'receive'; try = 'try';    when = 'when';
	
	// Attributes
	file = 'file'; module = 'module'; export = 'export'; import = 'import'; compile = 'compile';
	record = 'record';
	
	// Define attributes will be removed by the preprocessor
	//define_attr = '-' ignored* 'define' ignored* '(' ignored* alphanum+ ignored* ',' nonrparen* (')' ignored* nondot nonrparen*)* ')'+ ignored* '.';

	nil = '[' ignored* ']';
	underscore = '_';    // ("universal" pattern)

	// Numbers -- from core_scan.erl:
	// We can handle simple radix notation:
	//   <digit>#<digits>		- the digits read in that base
	//   <digits>				- the digits in base 10
	//   <digits>.<digits>
	//   <digits>.<digits>E+-<digits>
	integer
		= digit+
		| digit '#' digit+;
	decimal
		= digit+ '.' digit+
		| digit+ '.' digit+ ('e' | 'E') ('+' | '-')? digit+;
	
	// Atoms
	atom
		= lowercase alphanum*
		| ''' nonsinglequote* ('\' ''' nonsinglequote*)* ''';
	
	// Variable
	var
		= '_' alphanum+
		| uppercase alphanum*;

	// Strings
	char = '$' (escapedchar | any);
	string = '"' nonquote* ('\"' nonquote*)* '"';	

	// Whitespace/comments
	whitespace = whitespace;
	comment = comment;
// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------
// Preprocessor grammar
// ---------------------------------------------------------------------------
define_attr = '-' ignored* 'define';
attr_end = ')' ignored* '.';
macro_fun_apply = '?' alphanum+ ignored* '(';
macro_apply = '?' alphanum+;

Ignored Tokens
	whitespace,
	comment;

Productions
	module = tokens*;
	tokens
		= {macro_def} define_attr lparen [name]:macro_name [args]:macro_args? comma [body]:macro_body_tokens* attr_end
		| {macro_fun_apply} [name]:macro_fun_apply [args]:macro_apply_args? macro_fun_apply_end
		| {macro_apply} [name]:macro_apply
		| {other} token;
	
	// -define() statement
	macro_name
		= {lower} atom
		| {upper} var
		| {underscore} underscore;
	macro_args = lparen macro_arg_list? rparen;
	macro_arg_list
		= {one} var
		| {many} macro_arg_list comma var;
	macro_body_tokens
		= {define_attr} define_attr
		| {separator_or_keyword} separator_or_keyword
		| {other} common_token;

	// Macro application, e.g. ?MACRO(X)
	macro_apply_args
		= {one} balanced_expr
		| {many} macro_apply_args comma balanced_expr;
	macro_fun_apply_end
		= {paren} rparen
		| {stmt} attr_end;
	balanced_expr
		= {paren} lparen balanced_expr? rparen
		| {list} lbrack balanced_expr? rbrack
		| {tuple} lbrace balanced_expr? rbrace
		| {block} begin balanced_expr? end
		| {if} if balanced_expr? end
		| {case} case balanced_expr? end
		| {receive} receive balanced_expr? end
		| {tokens} balanced_expr balanced_expr_token
		| {token} balanced_expr_token;
	balanced_expr_token
	 	= {separator_or_keyword} balanced_expr_separator_or_keyword
		| {other} common_token;
	balanced_expr_separator_or_keyword
		// separator - no comma, balanced separator (e.g. parens)
		= {dot} dot           | {colon} colon | {bar} bar     | {barbar} barbar | {semi} semi
		| {question} question | {arrow} arrow | {pound} pound | {ltlt} ltlt     | {gtgt} gtgt
		// keyword - no balanced keywords (e.g. begin/end)
		| {after} after | {catch} catch | {cond} cond | {fun} fun | {let} let
		| {of} of       | {try} try     | {when} when;

	// Tokens recognized by main grammar
	token
		= {attr_end} attr_end
		| {separator_or_keyword} separator_or_keyword
		| {other} common_token;
	separator_or_keyword
		// separator
		= {lparen} lparen | {rparen} rparen | {lbrace} lbrace     | {rbrace} rbrace | {lbrack} lbrack
		| {rbrack} rbrack | {dot} dot       | {colon} colon       | {bar} bar       | {barbar} barbar 
		| {semi} semi     | {comma} comma   | {question} question | {arrow} arrow   | {pound} pound
		| {ltlt} ltlt     | {gtgt} gtgt
		// keyword
		| {after} after     | {begin} begin     | {case} case | {catch} catch | {cond} cond
		| {end} end         | {fun} fun         | {if} if     | {let} let     | {of} of
		| {receive} receive | {try} try   | {when} when;
	common_token
		// operator
		= {plus} plus     | {dash} dash | {star} star         | {slash} slash           | {div} div
		| {rem} rem       | {or} or     | {xor} xor           | {and} and               | {andalso} andalso
		| {orelse} orelse | {bor} bor   | {bxor} bxor         | {bsl} bsl               | {bsr} bsr
		| {band} band     | {eq} eq     | {eqeq} eqeq         | {neq} neq               | {lt} lt
		| {gt} gt         | {le} le     | {ge} ge             | {equiv} equiv           | {nequiv} nequiv 
		| {not} not       | {bnot} bnot | {plusplus} plusplus | {minusminus} minusminus | {bang} bang
		| {larrow} larrow
		// attribute
		| {file} file | {module} T.module | {export} export | {import} import | {compile} compile
		| {record} record
		// literal
		| {nil} nil | {universal} underscore | {integer} integer | {decimal} decimal | {atom} atom
		| {var} var | {char} char            | {string} string;
